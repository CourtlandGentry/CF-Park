AWSTemplateFormatVersion: 2010-09-09
#notes: available region(Ohio & Tokyo)
Description:
    This template deploys a Windows Server with DSA installed

Parameters:
  # EC2 Instance Owner  
    nameTag:
      Description: Provide EC2 Owner Name for Tag prefix 
      Type: String

  # Keypair
    keyPairName:
      Description: Provide keypair to use
      Type: "AWS::EC2::KeyPair::KeyName"
    
    oSVersion:
      Description: Operating System to Deploy
      Type: String
      AllowedValues:
      - WindowsServer2019  
      - WindowsServer2016
      - WindowsServer2012R2
      - WindowsServer2008R2
      - WindowsServer200364bit  
    
    subnetID:
      Description: Select Subnet to use (Default is DSaaS Public Subnet 2)
      Type: AWS::EC2::Subnet::Id
      Default: subnet-fa166e80  
    
    securityGroups:
      Description: Select Security Group/s for this EC2 instances
      Type: 'List<AWS::EC2::SecurityGroup::Id>'
      Default: sg-0f0b0eb448eeccce1, sg-0e66226f

    instanceType:
      Description: Select Instance Type 
      Type: String
      Default: t3.medium
      AllowedValues:
      - t3.nano
      - t3.micro
      - t3.small
      - t3.medium
      - t3.large
      - t3.xlarge
      - t3.2xlarge
      - m4.large
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10xlarge
      - m4.16xlarge
      - m5.large
      - m5.xlarge
      - m5.2xlarge
      - m5.4xlarge
      - m5.8xlarge
    
    dsmAdd:
      Description: Provide your DSM Server Address
      Type: String
    
    dsmPort:
          Description: Provide your DSM Server Port (4119 or 443)
          Type: String

    shiftTag:
      Description: Select your shift
      Type: String
      Default: IST-Shift    
      AllowedValues:
      - ANZ-Shift    
      - IST-Shift
      - NABU-Shift

    envTag:
      Description: Select your environment
      Type: String
      Default: Test
      AllowedValues:
      - Project
      - Test    
           
Mappings:
  RegionMap: 
    us-east-2:
      WindowsServer2019: ami-0ca69a9d06da3835d
      WindowsServer2016: ami-0952fb5203ddacf5c
      WindowsServer2012R2: ami-04fe13467029c1627
      WindowsServer2008R2: ami-0e50388a58e27fdc8
      WindowsServer200364bit: ami-08267c6d    
    ap-northeast-1:
      WindowsServer2019: ami-0f1b16857e17905cb
      WindowsServer2016: ami-0cd7a835d20a5fa3e
      WindowsServer2012R2: ami-0b0c9f033e6f44b78
      WindowsServer2008R2: ami-05138a6cb18ac84f2
      WindowsServer200364bit: ami-5119243f  
        
Resources:
  # Ec2 Instances
    EC201:
      Type: 'AWS::EC2::Instance'
      Properties:
        InstanceType: !Ref instanceType 
        ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", !Ref oSVersion]
        CreditSpecification:
          CPUCredits: standard
        KeyName: !Sub ${keyPairName}
        SubnetId: !Ref subnetID
        SecurityGroupIds: !Ref securityGroups
        Tags:
          - Key: Name
            Value: !Sub ${nameTag}-cfp-${oSVersion}
          - Key: Shift
            Value: !Ref shiftTag
          - Key: Environment
            Value: !Ref envTag          
        UserData: 
          Fn::Base64: 
              !Sub |
              <powershell>
              #requires -version 4.0
              # PowerShell 4 or up is required to run this script
              # This script detects platform and architecture.  It then downloads and installs the relevant Deep Security Agent package
              if (-NOT ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] "Administrator")) {
                Write-Warning "You are not running as an Administrator. Please try again with admin privileges."
                exit 1
              }
              $managerUrl="https://${dsmAdd}:${dsmPort}/"
              $ACTIVATIONURL="dsm://${dsmAdd}:4120/"

              $env:LogPath = "$env:appdata\Trend Micro\Deep Security Agent\installer"
              New-Item -path $env:LogPath -type directory
              Start-Transcript -path "$env:LogPath\dsa_deploy.log" -append
              echo "$(Get-Date -format T) - DSA download started"
              if ( [intptr]::Size -eq 8 ) { 
                $sourceUrl=-join($managerUrl, "software/agent/Windows/x86_64/agent.msi") }
              else {
                $sourceUrl=-join($managerUrl, "software/agent/Windows/i386/agent.msi") }
              echo "$(Get-Date -format T) - Download Deep Security Agent Package" $sourceUrl        
              $WebClient = New-Object System.Net.WebClient
              # Add agent version control info
              $WebClient.Headers.Add("Agent-Version-Control", "on")
              $WebClient.QueryString.Add("tenantID", "")
              $WebClient.QueryString.Add("windowsVersion", (Get-CimInstance Win32_OperatingSystem).Version)
              $WebClient.QueryString.Add("windowsProductType", (Get-CimInstance Win32_OperatingSystem).ProductType)
              [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;
              [Net.ServicePointManager]::ServerCertificateValidationCallback = {$true}
              $WebClient.DownloadFile($sourceUrl,  "$env:temp\agent.msi")
              if ( (Get-Item "$env:temp\agent.msi").length -eq 0 ) {
                  echo "Failed to download the Deep Security Agent. Please check if the package is imported into the Deep Security Manager. "
              exit 1
              }
              echo "$(Get-Date -format T) - Downloaded File Size:" (Get-Item "$env:temp\agent.msi").length
              echo "$(Get-Date -format T) - DSA install started"
              echo "$(Get-Date -format T) - Installer Exit Code:" (Start-Process -FilePath msiexec -ArgumentList "/i $env:temp\agent.msi /qn ADDLOCAL=ALL /l*v `"$env:LogPath\dsa_install.log`"" -Wait -PassThru).ExitCode 
              echo "$(Get-Date -format T) - DSA activation started"
              Start-Sleep -s 50
              & $Env:ProgramFiles"\Trend Micro\Deep Security Agent\dsa_control" -r
              & $Env:ProgramFiles"\Trend Micro\Deep Security Agent\dsa_control" -a $ACTIVATIONURL
              Stop-Transcript
              echo "$(Get-Date -format T) - DSA Deployment Finished"
              </powershell>

  ### EOF
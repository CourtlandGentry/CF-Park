AWSTemplateFormatVersion: 2010-09-09
#aws-cf.park, deploy MS SQL DB for DSM AMI Deployment
#notes: hard-coded ami, db name:dsmdb & user:dbadmin, available region(Ohio & Tokyo)
Description:
    This template deploys a MS SQL DB EC2 for DSM AMI Deployment

Parameters:
  # EC2 Instance Owner  
    nameTag:
      Description: Provide EC2 Owner Name for Tag prefix 
      Type: String
      Default: dexterl
  # Keypair
    keyPairName:
      Description: Provide keypair to use
      Type: "AWS::EC2::KeyPair::KeyName"
      Default: dexterl-kp-ohio
    
    dBVersion:
      Description: MSSQL version to deploy
      Type: String
      AllowedValues:
      - WindowsServer2019withSQL2019Std  
      - WindowsServer2019withSQL2017Std
      - WindowsServer2016withSQL2016Std
      - AmazonLinux2LTSwithSQL2017Std
    
    dBName:
      Description: Provide Database Name
      Type: String
      Default: dsmdb

    dBUser:
      Description: Provide Database Owner
      Type: String
      Default: dbadmin

    subnetID:
      Description: Select Subnet to use (Default is DSaaS Public Subnet 2)
      Type: AWS::EC2::Subnet::Id
      Default: subnet-fa166e80  
    
    securityGroups:
      Description: Select Security Group/s for this EC2 instances
      Type: 'List<AWS::EC2::SecurityGroup::Id>'
      Default: sg-0f0b0eb448eeccce1, sg-0e66226f

    instanceType:
      Description: Select Instance Type (For MSSQL, minimum is t3.xlarge)
      Type: String
      Default: t3.xlarge
      AllowedValues:
      - t3.nano
      - t3.micro
      - t3.small
      - t3.medium
      - t3.large
      - t3.xlarge
      - t3.2xlarge
      - m4.large
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10xlarge
      - m4.16xlarge
      - m5.large
      - m5.xlarge
      - m5.2xlarge
      - m5.4xlarge
      - m5.8xlarge
           
Mappings:
  RegionMap: 
    us-east-2:
      WindowsServer2019withSQL2019Std: ami-0451b0363c5844015
      WindowsServer2019withSQL2017Std: ami-0a065eb81c693c781
      WindowsServer2016withSQL2016Std: ami-08ca9fa2de549ef1d
      AmazonLinux2LTSwithSQL2017Std: ami-0e50388a58e27fdc8    
    ap-northeast-1:
      WindowsServer2019withSQL2019Std: ami-023e573216cc8a615
      WindowsServer2019withSQL2017Std: ami-0c5b6be35787a91c0
      WindowsServer2016withSQL2016Std: ami-00402e7495e12ba72
      AmazonLinux2LTSwithSQL2017Std: ami-05a63b7c2d115a670    
        
Resources:
  # Ec2 Instances
    EC201:
      Type: 'AWS::EC2::Instance'
      Properties:
        InstanceType: !Ref instanceType 
        ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", !Ref dBVersion]
        CreditSpecification:
          CPUCredits: standard
        KeyName: !Sub ${keyPairName}
        SubnetId: !Ref subnetID
        SecurityGroupIds: !Ref securityGroups
        Tags:
          - Key: Name
            Value: !Sub ${nameTag}-cfp-sqldb        
        UserData: 
          Fn::Base64: 
              !Sub |
                <powershell>
                New-Item -path $env:LogPath -type directory
                Start-Transcript -path "$env:LogPath\db_deploy.log" -append
                echo "$(Get-Date -format T) - CreateDB Script started"
                Start-Sleep 25
                # set param
                $inst = "."
                $dbname = "dsmdb"
                $user = "dbadmin"
                # import SqlServer module
                Import-Module -Name "SqlServer"               
                # change to SQL Server instance directory  
                Set-Location SQLSERVER:\SQL\$inst        
                # create object and database  
                $db = New-Object -TypeName Microsoft.SqlServer.Management.Smo.Database -Argumentlist $inst, $dbname  
                $db.Create()  
                echo "$(Get-Date -format T) - dsmdb created"
                # create user
                $database = $server.Databases[$dbname]
                $dbUser = New-Object -TypeName Microsoft.SqlServer.Management.Smo.User -ArgumentList $database, $user
                $dbUser.Login = $user
                $dbUser.Create()
                # set recovery model and owner
                $db.RecoveryModel = "simple"
                $db.SetOwner($user)
                $db.Alter()
                Stop-Transcript
                echo "$(Get-Date -format T) - CreateDB Script Finished"
                </powershell>
  
Outputs:
  EC201Out:
    Description: EC2 instance id.
    Value: !Ref EC201
    Export:
      Name:  !Sub ${nameTag}-cfp-EC2-sqldb
  dbOut:
    Description: Created database
    Value: !Ref dBName
    Export:
      Name:  !Sub ${nameTag}-cfp-dbname-sqldb
  userOut:
    Description: Database owner
    Value: !Ref dBUser
    Export:
        Name:  !Sub ${nameTag}-cfp-owner-sqldb
### EOF
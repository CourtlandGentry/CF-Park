AWSTemplateFormatVersion: 2010-09-09
Description:
    This template deploys a DSM on Windows Server with MSSQL database
    
Parameters:

    nameTag:
      Description: Provide EC2 Owner Name for Tag prefix 
      Type: String
      Default: dexterl

    keyPairName:
      Description: Provide keypair to use
      Type: "AWS::EC2::KeyPair::KeyName"
      Default: dexterl-kp-ohio
    
    dBVersion:
      Description: Select the Base OS and MSSQL version to deploy
      Type: String
      AllowedValues:
       - WindowsServer2019withSQL2019Std  
       - WindowsServer2019withSQL2017Std
       - WindowsServer2016withSQL2016Std
       - AmazonLinux2LTSwithSQL2017Std
      
    DSMver:
      Description: Choose the Deep Security Manager version (LTS/FR).
      Type: String
      Default: 12.5
      AllowedValues:
       - 11.0
       - 12.0
       - 12.5
       - 20.0

    DSMBuild:
      Description: Provide the DSM version, please follow proper format e.g 12.5.985
      Type: String
      Default: 12.5.985
      
    aCode:
      Description: Provide the Deep Security Activation Code
      Type: String
      Default: AP-R9RM-92WHD-B2UR5-BV2YB-HZYM8-HYYVA

    dBase:
      Description: Provide the Deep Security Database Name
      Type: String
      Default: dsmdb
      
    dBaseUser:
      Description: Provide the Database Owner
      Type: String
      Default: dbadmin

    dBasePass:
      Description: Provide the Database Password
      Type: String
      Default: trendmicro
    
    subnetID:
      Description: Select Subnet for DSM Server (Default is DSaaS Public Subnet 2)
      Type: AWS::EC2::Subnet::Id
      Default: subnet-fa166e80  
    
    securityGroups:
      Description: Select Security Group/s for this EC2 instances
      Type: 'List<AWS::EC2::SecurityGroup::Id>'
      Default: sg-0f0b0eb448eeccce1, sg-0e66226f

    instanceType:
      Description: Select Instance Type 
      Type: String
      Default: t2.xlarge
      AllowedValues:
      - t2.large
      - t2.xlarge
      - t3.large
      - t3.xlarge
      - t3.2xlarge
      - m4.large
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10xlarge
      - m4.16xlarge
      - m5.large
      - m5.xlarge
      - m5.2xlarge
      - m5.4xlarge
      - m5.8xlarge

    shiftTag:
      Description: Select your shift
      Type: String
      Default: IST-Shift    
      AllowedValues:
      - ANZ-Shift    
      - IST-Shift
      - NABU-Shift

    envTag:
      Description: Select your environment
      Type: String
      Default: Test
      AllowedValues:
      - Project
      - Test    
           
Mappings:
  RegionMap: 
    us-east-2:
      WindowsServer2019withSQL2019Std: ami-0451b0363c5844015
      WindowsServer2019withSQL2017Std: ami-0a065eb81c693c781
      WindowsServer2016withSQL2016Std: ami-08ca9fa2de549ef1d
      AmazonLinux2LTSwithSQL2017Std: ami-0e50388a58e27fdc8    
    ap-northeast-1:
      WindowsServer2019withSQL2019Std: ami-023e573216cc8a615
      WindowsServer2019withSQL2017Std: ami-0c5b6be35787a91c0
      WindowsServer2016withSQL2016Std: ami-00402e7495e12ba72
      AmazonLinux2LTSwithSQL2017Std: ami-05a63b7c2d115a670  
        
Resources:
  # Ec2 Instances
    DSMEC201:
      Type: 'AWS::EC2::Instance'
      Properties:
        InstanceType: !Ref instanceType 
        ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", !Ref dBVersion]
        KeyName: !Sub ${keyPairName}
        SubnetId: !Ref subnetID
        SecurityGroupIds: !Ref securityGroups
        Tags:
          - Key: Name
            Value: !Sub ${nameTag}-cfp-DSM-${DSMver}
          - Key: Shift
            Value: !Ref shiftTag
          - Key: Environment
            Value: !Ref envTag          
        UserData: 
          Fn::Base64: 
            !Sub |

            db=${dBase}
            user=${dBaseUser}
            dbPass=${dBasePass}
            osCheck=${oSVersion}
            #Deploy DSM
            masterpass=trendmicro
            SERVICE=dsm_s
            AC=${aCode}
            DSM_Version=${DSMver}
            DSM_Build=${DSMBuild}
            localIP=`curl http://169.254.169.254/latest/meta-data/local-ipv4`
            #Start DSM installation
            chmod 755 /root/dsm/$DSM_Build     
            /root/dsm/$DSM_Build -q -varfile install.properties >> install.log
            if ps ax | grep -v grep | grep $SERVICE > /dev/null
            then
              echo "$SERVICE service running, installation complete" >> install.log;
              systemctl stop dsm_s;
              /opt/dsm/dsm_c -action changesetting -name settings.configuration.webserviceAPIEnabled -value true;
              /opt/dsm/dsm_c -action changesetting -name settings.configuration.statusMonitoringAPIEnabled -value true;
              /opt/dsm/dsm_c -action changesetting -name settings.configuration.agentInitiatedActivation -value 1;
              /opt/dsm/dsm_c -action changesetting -name settings.configuration.agentInitiatedActivationHostname -value true;
              /opt/dsm/dsm_c -action changesetting -name settings.configuration.agentInitiatedActivationActiveHost -value 2;
              /opt/dsm/dsm_c -action changesetting -name settings.configuration.allowReactivateClonedVM -value true;
              /opt/dsm/dsm_c -action changesetting -name settings.configuration.allowReactivateUnknownVM -value true;
              sleep 5
              systemctl start dsm_s;
            fi
            systemctl status dsm_s >> install.log 

    elasticIP:
        Type: AWS::EC2::EIP
        Properties:
            InstanceId: !Ref DSMEC201  
  ### EOF